/**
**      ==START OF REFU LICENSE==
**
** Copyright (c) 2011-2013, Karapetsas Eleftherios
** All rights reserved.
**
** Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:
**  1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
**  2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in
**     the documentation and/or other materials provided with the distribution.
**  3. Neither the name of the Original Author of Refu nor the names of its contributors may be used to endorse or promote products derived from
**
** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
** INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
** DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
** SERVICES;LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
** WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
**
**      ==END OF REFU LICENSE==
**
**
** --Data_Structures/hashmap.h
** This header declares functions that operate on RF_Hashmap, a simple
** separate chaining with linked list hash map implementation
**
---------------------For internal library include make sure to have----------------------------
#include <Definitions/imex.h> //for import export macro
#include <Definitions/types.h> //for fixed size data types
#include <Definitions/defarg.h> //for enabling default arguments
#include <Preprocessor/rf_tokens.h>//for the defined library tokens
#include <String/string_decl.h> //for RF_String
#include <Definitions/retcodes.h> //for error codes, bool
#include <Data_Structures/hashmap_decl.h> //for the struct declarations
#include <Data_Structures/hashmap.h>
---------------------For internal library include make sure to have----------------------------
*/

/* @omit start */

/*
 * This file is a generic TEMPLATE. Depending on the options you provide
 * in scons though various specializations of this file will get
 * generated during building the library. If you want to use the actual file
 * as it is in its generic mode then you have to provide the "generic"
 * argument inside the data structure's specialization argument during build
 */

/* @omit end */

#ifndef RF_HASHMAP_H
#define RF_HASHMAP_H

#ifdef __cplusplus
extern "C"
{///opening bracket for calling from C++
#endif


/**
 ** Initializes a hashmap data structure
 ** @param m The hashmap to initialize
 ** @param s The initial size of the map in "buckets"
 ** @param object_size The size of the generic object stored in the
 ** hashmap. Only used in the generic case of the specialization
 ** @param ptr2Copy A pointer to a copy function for the generic object.
 ** Only used in the generic case of the specialization
 ** @param ptr2Destroy A pointer to a destroy function for the generic object.
 ** Only used in the generic case of the specialization
 ** @return @c true for success and @c false otherwise
 */
i_DECLIMEX_ char rfHashmap_Init(RF_Hashmap* m, uint32_t s);

/**
 ** Allocates and returns a hashmap data structure
 ** @param s The initial size of the map in "buckets"
 ** @param object_size The size of the generic object stored in the
 ** hashmap. Only used in the generic case of the specialization
 ** @param ptr2Copy A pointer to a copy function for the generic object.
 ** Only used in the generic case of the specialization
 ** @param ptr2Destroy A pointer to a destroy function for the generic object.
 ** Only used in the generic case of the specialization
 ** @return The allocated @ref RF_Hashmap or @c NULL if there is an error
 */
i_DECLIMEX_ RF_Hashmap* rfHashmap_Create(uint32_t s);

/**
 ** @brief Iterates a hashmap
 **
 ** This function iterates through all of the values of the map 
 ** and invokes the given function @c act for each value
 ** @param m The hashmap to iterate
 ** @param act The function to execute for each iterated hashmap
 ** It should return a bool which should always be @c true unless
 ** the iteration should stop abruptly. Its arguments are:
 ** - A pointer to the value for iteration (or copy if Plain old data)
 ** - An extra void* for any extra data the user may want to pass to the
 **   function
 ** @param user_data Any extra data that you may want to pass to iteration.
 ** They will be passed on to the act function. You can simply pass @c NULL
 ** @return Returns @c true if all of the values got iterated succesfully
 ** and @c false if not. Breaking out of iteration will also cause a
 ** @c false return value.
 */
/* @mutate void* TYPEPTR_OBJ_ONLY */
i_DECLIMEX_ bool rfHashmap_Iterate(RF_Hashmap* m, bool (*act)(void*,
                                                              void*), void* user_data);

/**
 ** Deinitializes a hashmap
 ** @param m The map to deinitialize
 */
i_DECLIMEX_ void rfHashmap_Deinit(RF_Hashmap* m);

/**
 ** Destroys a hashmap
 ** @param m The map to destroy
 */
i_DECLIMEX_ void rfHashmap_Destroy(RF_Hashmap* m);


/**
 ** Insert a value into the Hashmap
 ** @param m The map to insert the @c value into
 ** @param key An @ref RF_String representing the key to associate with
 ** the particular value
 ** @param value The value to insert into the hashmap
 ** @param exists Pass a boolean here to check whether the key
 ** already exists in the table
 ** @return @c true if all is fine and @c false otherwise
 */
i_DECLIMEX_ char rfHashmap_Insert(RF_Hashmap* m, RF_String* key,
                                  /* @mutate void* TYPEPTR_OBJ_ONLY */
                                  void* value,
                                  bool* exists);



/**
 ** Query a value for a key of the hashmap
 ** @param m The map to query
 ** @param key An @ref RF_String with the key to query the map for
 ** @param value If @c key exists in the map then @c value will contain the
 ** value associated with this key. Is a shallow copy
 ** @return If the @c key exists in the map then @c true will be returned.
 ** Otherwise @c false will be returned
 */
i_DECLIMEX_ char rfHashmap_Get_IN(RF_Hashmap* m, RF_String* key,
                                  /* @mutate void* TYPEPTR */
                                  void* value);

/**
 ** Query a value for a key of the hashmap giving a pointer to that value
 ** @param m The map to query
 ** @param key An @ref RF_String with the key to query the map for
 ** @return If the value for the key exist a pointer it will be returned.
 ** If not NULL.
 */
/* @mutate void* TYPEPTR_OBJ_ONLY */
i_DECLIMEX_ void* rfHashmap_Get_OUT(RF_Hashmap* m, RF_String* key);

#ifdef __cplusplus
}///closing bracket for calling from C++
#endif

#endif//include guards end
