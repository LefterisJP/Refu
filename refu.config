# This is the configuration file of Refu Library
# Notice that it is a python file. All strings need to be 
# enclosed in ' ' and you can freely use anything you want
# from the Python libraries.

import os

#The root directory of the refu library. Absolute value
REFU_DIR= './'

# The name of the directory to use (will create if it does not already exist)
# for dumping the object files. Its parent directory is the refu directory
OBJ_DIR='obj'

# Extra compiler flags that you want to send to the provided compiler
# Please note that you have to be certain that these are valid flags
# for your compiler or else build will fail
# The flags have to be in one line and separated by spaces
COMPILER_FLAGS='-Wall'

# Extra flags that may be accepted by the program that creates the dynamic libray
# Please note that you have to be certain that these are valid flags
# for your compiler or else build will fail
# The flags have to be in one line and separated by spaces
LINKER_DYNAMIC_FLAGS= ''

# Extra flags that may be accepted by the program that creates a static library
# Please note that you have to be certain that these are valid flags
# for your compiler or else build will fail
# The flags have to be in one line and separated by spaces
LINKER_STATIC_FLAGS= ''

# The name of the output file, be it a shared or dynamic library.
# This only affects the name of the final file. For example if it was a dll
# it would be NAME.dll. Notice that certain compiler like gcc tend to add 
# a 'lib' prefix
OUTPUT_NAME='refu'

# The modules of Refu library that you want to build. Accepted values
# are either ALL or a combination of the values below. Combine values by 
# separating each value with a comma. Don't forget to enclose the string
# in ' '
# ---------------------------------------------------------------------------------------------------------
# String --> For enabling the usage of RF_String and RF_StringX
# Data_Structures -> For enabling the usage of RF_List, RF_Array and RF_BinaryArray.
# note that after providing this flag, providing individual datastructure modules flags is meaningless
	# List -> For enabling the usage of RF_List
	# Array -> For enabling the usage of RF_Array
	# BinaryArray -> For enabling the usage of RF_BinaryArray
# Time -> For enabling the usage of all time related modules such as RF_Timer, RF_Date e.t.c.
	# Date -> For enabling the usage of RF_Date
# Xml -> For enabling the usage of RF_XML
# IO -> for enabling the usage of I/O functions 
# Textfile	-> For enabling the usage of RF_TextFile
# System -> for enabling the usage of system functions that deal with the Operating system such as
# rfMakeDir e.t.c.
# Threads --> For enabling the usage of all Threading related modules such as RF_Thread,RF_Mutex e.t.c.
	# Threads_Simple -> For enabling everything in Threads except RF_ThreadX
	# Threads_X      -> For enabling RF_ThreadX
# ----------------------------------------------------------------------------------------------------------
# Default value is ALL.
REFU_MODULES= 'ALL'




#====REFU COMPILE OPTIONS START====#

# If YES then the library is built with some functions having default
# arguments, utilizing the C preprocessor. If NO they are build normally
# Accepted values for this option are YES and NO. Default is YES.
DEFAULT_ARGUMENTS='YES'

# If YES then the malloc and calloc calls of the library check for
# failure and in case of failure log an error and exit the process.
# If NO then malloc and calloc are called normally.
# Accepted values for this option are YES and NO. Default is NO.
SAFE_MEMORY_ALLOC='NO'

# If YES then the library's error logging will be verbose which basically
# means that every error will be printed in the appropriate log file stream
# Default is YES.
VERBOSE_ERROR_LOGGING='YES'

# This option is the number of bytes that will be read each time by the library's 
# version of fgets. Must be a positive integer number. Default is 512
FGETS_READ_BYTESN= 512

# This is the multiplier by which a StringX's buffer will get allocated/reallocated
# by when there is a need for buffer extension. Also when the StringX gets initialized 
# this is how much bigger than the given String the buffer will be. Must be a positive
# integer. Default is 2
STRINGX_CAPACITY_MULTIPLIER= 2

# This is the multiplier by which a List's buffer will get allocated/reallocated
# by when there is a need for buffer extension. Also when the List gets initialized 
# this is how much bigger than the given initial size the buffer will be. Must be a positive
# integer. Default is 2
LIST_CAPACITY_MULTIPLIER= 2

# This is the default size in bytes of the main thread's Local Stack of the Refu Library
# All objects that are initialized as temporary objects such as with the 
# RFS_() macro or the RFXML_() macro are initialized in this stack. Make sure to provide
# a big enough value so that no overflow happens for your program. Default Value is around 1 MB
# This is just the value to be used if no specific value is provided at rfInit()
LOCAL_STACK_SIZE= 1048576

# This control whether to add a BOM(ByteOrderMark) at the beginning of newly
# created TextFiles. Provides YES to add and NO, not to. Default is YES
TEXTFILE_ADD_BOM= 'YES'


# This option affects The extended thread objects RF_TreadX,
# and it denotes what should the default value of the size of the 
# message queue of a newly created RF_ThreadX. You still have the option
# to change that in run-rime through the initialization functions but
# if a value is not provided this will be the default value.
# Default value is 10
THREADX_MSGQUEUE_SIZE= 10


