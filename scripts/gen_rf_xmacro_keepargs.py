#!/usr/bin/env python
import os.path
import sys

from common import max_arguments

def gen_xmacro_keepargs():
    # the maximum number of arguments
    i = max_arguments * 2
    print("Generating rf_xmacro_keepargs.h ...")
    f = open(os.path.dirname(
        sys.argv[0]) + "/../include/Preprocessor/rf_xmacro_keepargs.h", "w")
    # put some required definitions at the top
    f.write("/**\n** @author Lefteris\n** @date 02/10/2015\n**\n\
** This file contains macros to keep specific arguments from an argument n\
** or to combine arguments from such a list.\n\
** It is automatically generated by  python script\n\
** gen_rf_xmacro_keepargs.py\n*/")

    f.write("\n#ifndef RF_XMACRO_KEEPARGS_H\n")
    f.write("#define RF_XMACRO_KEEPARGS_H\n")
    f.write("\n#include <Preprocessor/rf_xmacro_argcount.h>\n")

    # KEEP_ODD_ARGUMENTS
    f.write("\n//! Keeps every odd numbered argument\n//! eg. (arg1, ARG2, arg3, ARG4)\n")
    f.write("#define RP_KEEP_ODD_ARGUMENTS(...) RP_SELECT_FUNC(RP_KEEP_ODD_ARGUMENTS, RF_NARG(__VA_ARGS__), __VA_ARGS__)\n\n")
    while (i > 1):
        if (i % 2 == 0):
            macro_value = "RP_KEEP_ODD_ARGUMENTS{}(__VA_ARGS__)".format(i - 1)
        else:  # odd
            macro_value = "i_ARG, RP_KEEP_ODD_ARGUMENTS{}(__VA_ARGS__)".format(i - 1)
        f.write("#define RP_KEEP_ODD_ARGUMENTS{}(i_ARG, ...) {}\n".format(i, macro_value))
        i -= 1
    # now close the macro call chain
    f.write("#define RP_KEEP_ODD_ARGUMENTS1(i_ARG) i_ARG\n")

    # KEEP_EVEN_ARGUMENTS
    i = max_arguments * 2
    f.write("\n\n\n//! Keeps every even numbered argument\n//! eg. (ARG1, arg2, ARG3, arg4)\n")
    f.write("#define RP_KEEP_EVEN_ARGUMENTS(...) RP_SELECT_FUNC(RP_KEEP_EVEN_ARGUMENTS, RF_NARG(__VA_ARGS__), __VA_ARGS__)\n\n")
    while (i > 2):
        if (i % 2 != 0):
            macro_value = "RP_KEEP_EVEN_ARGUMENTS{}(__VA_ARGS__)".format(i - 1)
        else:  # even
            macro_value = "i_ARG, RP_KEEP_EVEN_ARGUMENTS{}(__VA_ARGS__)".format(i - 1)
        f.write("#define RP_KEEP_EVEN_ARGUMENTS{}(i_ARG, ...) {}\n".format(i, macro_value))
        i -= 1
    # now close the macro call chain
    f.write("#define RP_KEEP_EVEN_ARGUMENTS2(i_ARG, ...) i_ARG\n")

    # COMBINE_EVERY_TWO_ARGUMENTS
    i = max_arguments * 2
    f.write("\n\n\n//! Combines every 2 arguments\n//! eg. (arg1, arg2, arg3, arg4) becomes (arg1 arg2, arg3 arg4)\n")
    f.write("#define RP_COMBINE_EVERY_TWO_ARGUMENTS(...) RP_SELECT_FUNC(RP_COMBINE_EVERY_TWO_ARGUMENTS, RF_NARG(__VA_ARGS__), __VA_ARGS__)\n\n")
    while (i > 1):
        if (i % 2 == 0):
            macro_value = "i_ARG RP_COMBINE_EVERY_TWO_ARGUMENTS{}(__VA_ARGS__)".format(i - 1)
        else:  # odd
            macro_value = "i_ARG, RP_COMBINE_EVERY_TWO_ARGUMENTS{}(__VA_ARGS__)".format(i - 1)
        f.write("#define RP_COMBINE_EVERY_TWO_ARGUMENTS{}(i_ARG, ...) {}\n".format(i, macro_value))
        i -= 1
    # now close the macro call chain
    f.write("#define RP_COMBINE_EVERY_TWO_ARGUMENTS1(i_ARG, ...) i_ARG\n")

    f.write("#endif")
    
    # at the end close the file
    print("rf_xmacro_keepargs.h has been generated!")
    f.close()


if __name__ == '__main__':
    gen_xmacro_keepargs()
