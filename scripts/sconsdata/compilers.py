class Compiler:
    name = ""
    path = ""
    bin = ""
    dlink = ""
    slink = ""
    toolsValues = {}
    coptions = {}
    cflags = {}
    lflags = {}
    def __init__(self,name,path=0,bin=0,dlink=0,slink=0,coptions=0,cflags=0,lflags=0,libs=0,toolsValues = 0):
        self.name = name
        self.path = path
        self.bin = bin
        self.dlink = slink
        self.cflags = cflags
        self.lflags = lflags
        self.libs = libs
        self.toolsValues = toolsValues;
        self.coptions = coptions;
        
        
#Defining the compilers
compilers = {}
#GCC
compilers['gcc'] = Compiler(name='gcc',
coptions = {'all':['-static-libgcc'], 'Windows':[],'Linux':[]},
cflags = {'all':{}, 'Windows':{},'Linux':{'_GNU_SOURCE':None}},
lflags = {'all':[], 'Windows':[],'Linux':[]},
#trying to do without these loader flags since they should be generated by the dependent libs
#lflags = {'all':[], 'Windows':[],'Linux':['-lrt','-lpthread']},
libs = {'all':[], 'Windows':[],'Linux':['rt', 'pthread']},
toolsValues = {'Windows': ['mingw'] , 'Linux':['gcc']}
)


def setupCompiler(name,env,os,compilerdir,testExec):
    """
        Setups the compiler depending on the system
        --name: The name of the compiler
        --env: The SCONS environment
        --os: Operating system value
        --compilerdir: The directory of the compiler
        --testExec: A boolean flag denoting if this is a test executable or not
    """
    #add general options and defines for the refu project
    if(os == 'Windows'):
        env.Append(CPPDEFINES       = {'REFU_WIN32_VERSION':None})
        env.Append(CPPDEFINES       = {'_WIN32_WINNT':'0x501'})
    elif(os == 'Linux'):
        env.Append(CPPDEFINES       = {'REFU_LINUX_VERSION': None})
        env.Append(CPPDEFINES       = {'_LARGEFILE64_SOURCE': None})
    else:
        print "Unsuported Operating System value \""+os+"\" Detected ... Quitting"
        Exit(1)
    env.Append(CPPDEFINES   = {'_FILE_OFFSET_BITS' : 64})
    #figure out the tools value
    env.Replace(tools   = compilers[name].toolsValues[os])
    #if a compiler dir has been given then use that. Not given is the '.' directory
    if(compilerdir != '.'):
        env.Replace(ENV = {'PATH' : compilerdir})
    
    #set compiler defines, and compile and link options
    if(compilers[name].coptions['all'] != []):
        env.Append(CCFLAGS      = compilers[name].coptions['all'])
    if(compilers[name].coptions[os] != []):
        env.Append(CCFLAGS      = compilers[name].coptions[os])
        
    if(compilers[name].cflags['all'] != []):
        env.Append(CPPDEFINES       = compilers[name].cflags['all'])
    if(compilers[name].cflags[os] != []):
        env.Append(CPPDEFINES       = compilers[name].cflags[os])
    
    # if(compilers[name].lflags['all'] != []):
    #     #env.Append(ARFLAGS         = compilers[name].lflags['all'])
    #     env.Append(SHLINKFLAGS = compilers[name].lflags['all'])
    #     #if we are compiling a test executable link to the dependencies
    #     if(testExec):
    #         env.Append(LIBS = compilers[name].lflags['all'])
    # if(compilers[name].lflags[os] != []):
    #     #env.Append(ARFLAGS     = compilers[name].lflags[os])
    #     env.Append(SHLINKFLAGS  = compilers[name].lflags[os])
    #     #if we are compiling a test executable link to the dependencies
    #     if(testExec):
    #         env.Append(LIBS = compilers[name].lflags[os])
        
    if(compilers[name].libs['all'] != []):
        env.Append(LIBS       = compilers[name].libs['all'])
    if(compilers[name].libs[os] != []):
        env.Append(LIBS       = compilers[name].libs[os])