/**
**      ==START OF REFU LICENSE==
**
** Copyright (c) 2011-2013, Karapetsas Eleftherios
** All rights reserved.
** 
** Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:
**  1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
**  2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in
**     the documentation and/or other materials provided with the distribution.
**  3. Neither the name of the Original Author of Refu nor the names of its contributors may be used to endorse or promote products derived from
** 
** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
** INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
** DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
** SERVICES;LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
** WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
**
**      ==END OF REFU LICENSE==
**
**/

$IF 0
/*
 * This file is a TEMPLATE. It does not actually get compiled at all
 * anywhere inside the library. Depending on the options you provide
 * in scons though various specializations of this file will get
 * generated during building the library
 */
$ENDIF

/*------------- Corrensponding Header inclusion -------------*/
#include <Definitions/imex.h> //for import export macro
#include <Definitions/types.h> //for fixed size data types
#include <Definitions/defarg.h> //for enabling default arguments
#include <Preprocessor/rf_tokens.h>//for the defined library tokens
$INCLUDE @DECL_H
$INCLUDE @H
/*------------- Outside Module inclusion -------------*/
//for error logging
    #include <stdio.h>//for FILE* used inside printf.h
    #include <String/string_decl.h> //for RF_String
    #include <String/common.h> //for RFS_() macro
    #include <Utils/error.h>
//for memory allocation macros
    #include <stdlib.h> //for malloc, calloc,realloc and exit()
    #include <Definitions/retcodes.h> //for error codes, logged in allocation failure
    #include <Utils/memory.h> //for refu memory allocation

//for local scope
    #include <Definitions/threadspecific.h> //for the thread specific attributes
    #include <Utils/localmem_decl.h> //for RF_LocalMemoryStack
    #include <stdint.h> //for UINT32_MAX used in RF_ENTER_LOCAL_SCOPE() macro
    #include <Utils/localscope.h>
/*------------- libc includes -------------*/
#include <string.h> //for memcpy and memcp
/*------------- End of includes -------------*/


@DATA_STRUCT* rfList_Create()
{
    @DATA_STRUCT* ret;
    //allocate the list
    RF_MALLOC(ret, sizeof(@DATA_STRUCT), NULL);
    if(rfList_Init(ret) == false)
    {
        free(ret);
        ret = NULL;
    }
    return ret;
}


char rfList_Init(@DATA_STRUCT* l)
{
    //allocate the first node
    RF_MALLOC(l->start, sizeof(@NODE), false);
    //no need to initialize the data of the first node, can be garbage
    l->start->next = 0;
    l->end = l->start;
    return true;
}



char rfList_Copy_IN(@DATA_STRUCT* dst,
                    @DATA_STRUCT* src)
{
    @NODE* n = src->start->next, *c, *pr = 0;

    //allocate first node
    RF_MALLOC(c, sizeof(@NODE), false);
    c->next = 0;
    dst->start = c;
    pr = c;
    while(n != 0)
    {
        //allocate a node
        RF_MALLOC(c, sizeof(@NODE), false);
        //copy its data
        if(!@OBJECT_COPY(&c->data, &n->data))
        {
            return false;
        }
        c->next = 0;
        //connect it to the previous one
        pr->next = c;
        pr = c;
        //keep reading the src
        n = n->next;
    }
    dst->end = c;
    return true;
}

@DATA_STRUCT* rfList_Copy_OUT(@DATA_STRUCT* src)
{
    @DATA_STRUCT* dst;
    RF_MALLOC(dst, sizeof(@DATA_STRUCT), NULL);
    if(rfList_Copy_IN(dst, src) == false)
    {
        free(dst);
        dst = NULL;
    }
    return dst;
}


void rfList_Deinit(@DATA_STRUCT* a)
{
    @NODE* n = a->start->next, *p;
    while(n != 0)
    {
        p = n;
        n = n->next;
        //free this node
        @OBJECT_DESTROY(&p->data);
        free(p);
    }
    //finally free start node
    free(a->start);
}

void rfList_Destroy(@DATA_STRUCT* a)
{
    rfList_Deinit(a);
    free(a);
}

char rfList_Add(@DATA_STRUCT* a, @TYPEPTR e)
{
    @NODE* n;
    char ret = true;
$IF @LMS
    RF_ENTER_LOCAL_SCOPE();
$ENDIF
    RF_MALLOC_JMP(n, sizeof(@NODE), ret = false, cleanup);
    n->next = 0;

    //add the data to the node
    if(!@OBJECT_COPY(&n->data, e))
    {
        ret = false;
        goto cleanup;
    }

    //connect the new node to the linked list
    a->end->next = n;
    a->end = n;

  cleanup:
$IF @LMS
    RF_EXIT_LOCAL_SCOPE();
$ENDIF
    return ret;
}

char rfList_Delete(@DATA_STRUCT* a, @TYPEPTR e)
{
    @NODE* n = a->start->next;
    @NODE* pr = a->start;
$IF @LMS
    RF_ENTER_LOCAL_SCOPE();
$ENDIF
    while(n != 0)
    {
        if(@OBJECT_COMPARE(e, &n->data))
        {
            if(n == a->end)
            {//if this is the last node
                @OBJECT_DESTROY(&n->data);
                pr->next = 0;
                a->end = pr;
                free(n);
$IF @LMS
                RF_EXIT_LOCAL_SCOPE();
$ENDIF
                return true;
            }
            //else it's somewhere in between
            @OBJECT_DESTROY(&n->data);
            pr->next = n->next;
            free(n);
$IF @LMS
            RF_EXIT_LOCAL_SCOPE();
$ENDIF
            return true;
        }
        pr = n;
        n = n->next;
    }
$IF @LMS
    RF_EXIT_LOCAL_SCOPE();
$ENDIF
    return false;
}

char rfList_Has(@DATA_STRUCT* a, @TYPEPTR e)
{
    @NODE* n = a->start->next;
$IF @LMS
    RF_ENTER_LOCAL_SCOPE();
$ENDIF
    while(n != 0)
    {
        if(@OBJECT_COMPARE(e, &n->data))
        {
$IF @LMS
            RF_EXIT_LOCAL_SCOPE();
$ENDIF
            return true;
        }
        n = n->next;
    }while(n != 0);
$IF @LMS
    RF_EXIT_LOCAL_SCOPE();
$ENDIF
    return false;
}
